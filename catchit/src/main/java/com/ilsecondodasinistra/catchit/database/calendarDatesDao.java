package com.ilsecondodasinistra.catchit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilsecondodasinistra.catchit.database.calendarDates;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table calendar_dates.
*/
public class calendarDatesDao extends AbstractDao<calendarDates, Void> {

    public static final String TABLENAME = "calendar_dates";

    /**
     * Properties of entity calendarDates.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Service_id = new Property(0, Integer.class, "service_id", false, "SERVICE_ID");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Exception_type = new Property(2, Integer.class, "exception_type", false, "EXCEPTION_TYPE");
    };


    public calendarDatesDao(DaoConfig config) {
        super(config);
    }
    
    public calendarDatesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'calendar_dates' (" + //
                "'SERVICE_ID' INTEGER," + // 0: service_id
                "'DATE' TEXT," + // 1: date
                "'EXCEPTION_TYPE' INTEGER);"); // 2: exception_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'calendar_dates'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, calendarDates entity) {
        stmt.clearBindings();
 
        Integer service_id = entity.getService_id();
        if (service_id != null) {
            stmt.bindLong(1, service_id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        Integer exception_type = entity.getException_type();
        if (exception_type != null) {
            stmt.bindLong(3, exception_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public calendarDates readEntity(Cursor cursor, int offset) {
        calendarDates entity = new calendarDates( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // service_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // exception_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, calendarDates entity, int offset) {
        entity.setService_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setException_type(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(calendarDates entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(calendarDates entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.ilsecondodasinistra.catchit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilsecondodasinistra.catchit.database.agency;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table agency.
*/
public class agencyDao extends AbstractDao<agency, Integer> {

    public static final String TABLENAME = "agency";

    /**
     * Properties of entity agency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Agency_id = new Property(0, int.class, "agency_id", true, "AGENCY_ID");
        public final static Property Agency_name = new Property(1, String.class, "agency_name", false, "AGENCY_NAME");
        public final static Property Agency_url = new Property(2, String.class, "agency_url", false, "AGENCY_URL");
        public final static Property Agency_timezone = new Property(3, String.class, "agency_timezone", false, "AGENCY_TIMEZONE");
        public final static Property Agency_lang = new Property(4, String.class, "agency_lang", false, "AGENCY_LANG");
        public final static Property Agency_phone = new Property(5, String.class, "agency_phone", false, "AGENCY_PHONE");
        public final static Property Agency_fare_url = new Property(6, String.class, "agency_fare_url", false, "AGENCY_FARE_URL");
    };


    public agencyDao(DaoConfig config) {
        super(config);
    }
    
    public agencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'agency' (" + //
                "'AGENCY_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: agency_id
                "'AGENCY_NAME' TEXT," + // 1: agency_name
                "'AGENCY_URL' TEXT," + // 2: agency_url
                "'AGENCY_TIMEZONE' TEXT," + // 3: agency_timezone
                "'AGENCY_LANG' TEXT," + // 4: agency_lang
                "'AGENCY_PHONE' TEXT," + // 5: agency_phone
                "'AGENCY_FARE_URL' TEXT);"); // 6: agency_fare_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'agency'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, agency entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAgency_id());
 
        String agency_name = entity.getAgency_name();
        if (agency_name != null) {
            stmt.bindString(2, agency_name);
        }
 
        String agency_url = entity.getAgency_url();
        if (agency_url != null) {
            stmt.bindString(3, agency_url);
        }
 
        String agency_timezone = entity.getAgency_timezone();
        if (agency_timezone != null) {
            stmt.bindString(4, agency_timezone);
        }
 
        String agency_lang = entity.getAgency_lang();
        if (agency_lang != null) {
            stmt.bindString(5, agency_lang);
        }
 
        String agency_phone = entity.getAgency_phone();
        if (agency_phone != null) {
            stmt.bindString(6, agency_phone);
        }
 
        String agency_fare_url = entity.getAgency_fare_url();
        if (agency_fare_url != null) {
            stmt.bindString(7, agency_fare_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public agency readEntity(Cursor cursor, int offset) {
        agency entity = new agency( //
            cursor.getInt(offset + 0), // agency_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agency_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // agency_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // agency_timezone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // agency_lang
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // agency_phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // agency_fare_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, agency entity, int offset) {
        entity.setAgency_id(cursor.getInt(offset + 0));
        entity.setAgency_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgency_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgency_timezone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAgency_lang(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAgency_phone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAgency_fare_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(agency entity, long rowId) {
        return entity.getAgency_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(agency entity) {
        if(entity != null) {
            return entity.getAgency_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.ilsecondodasinistra.catchit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilsecondodasinistra.catchit.database.stopTimes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table stop_times.
*/
public class stopTimesDao extends AbstractDao<stopTimes, Integer> {

    public static final String TABLENAME = "stop_times";

    /**
     * Properties of entity stopTimes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Trip_id = new Property(0, Integer.class, "trip_id", false, "TRIP_ID");
        public final static Property Arrival_time = new Property(1, String.class, "arrival_time", false, "ARRIVAL_TIME");
        public final static Property Departure_time = new Property(2, String.class, "departure_time", false, "DEPARTURE_TIME");
        public final static Property Stop_id = new Property(3, Integer.class, "stop_id", false, "STOP_ID");
        public final static Property Stop_sequence = new Property(4, int.class, "stop_sequence", true, "STOP_SEQUENCE");
        public final static Property Stop_headsign = new Property(5, String.class, "stop_headsign", false, "STOP_HEADSIGN");
        public final static Property Pickup_type = new Property(6, Integer.class, "pickup_type", false, "PICKUP_TYPE");
        public final static Property Drop_off_type = new Property(7, Integer.class, "drop_off_type", false, "DROP_OFF_TYPE");
        public final static Property Shape_dist_traveled = new Property(8, Float.class, "shape_dist_traveled", false, "SHAPE_DIST_TRAVELED");
    };


    public stopTimesDao(DaoConfig config) {
        super(config);
    }
    
    public stopTimesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'stop_times' (" + //
                "'TRIP_ID' INTEGER," + // 0: trip_id
                "'ARRIVAL_TIME' TEXT NOT NULL ," + // 1: arrival_time
                "'DEPARTURE_TIME' TEXT NOT NULL ," + // 2: departure_time
                "'STOP_ID' INTEGER," + // 3: stop_id
                "'STOP_SEQUENCE' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 4: stop_sequence
                "'STOP_HEADSIGN' TEXT," + // 5: stop_headsign
                "'PICKUP_TYPE' INTEGER," + // 6: pickup_type
                "'DROP_OFF_TYPE' INTEGER," + // 7: drop_off_type
                "'SHAPE_DIST_TRAVELED' REAL);"); // 8: shape_dist_traveled
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'stop_times'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, stopTimes entity) {
        stmt.clearBindings();
 
        Integer trip_id = entity.getTrip_id();
        if (trip_id != null) {
            stmt.bindLong(1, trip_id);
        }
        stmt.bindString(2, entity.getArrival_time());
        stmt.bindString(3, entity.getDeparture_time());
 
        Integer stop_id = entity.getStop_id();
        if (stop_id != null) {
            stmt.bindLong(4, stop_id);
        }
        stmt.bindLong(5, entity.getStop_sequence());
 
        String stop_headsign = entity.getStop_headsign();
        if (stop_headsign != null) {
            stmt.bindString(6, stop_headsign);
        }
 
        Integer pickup_type = entity.getPickup_type();
        if (pickup_type != null) {
            stmt.bindLong(7, pickup_type);
        }
 
        Integer drop_off_type = entity.getDrop_off_type();
        if (drop_off_type != null) {
            stmt.bindLong(8, drop_off_type);
        }
 
        Float shape_dist_traveled = entity.getShape_dist_traveled();
        if (shape_dist_traveled != null) {
            stmt.bindDouble(9, shape_dist_traveled);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public stopTimes readEntity(Cursor cursor, int offset) {
        stopTimes entity = new stopTimes( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // trip_id
            cursor.getString(offset + 1), // arrival_time
            cursor.getString(offset + 2), // departure_time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // stop_id
            cursor.getInt(offset + 4), // stop_sequence
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stop_headsign
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // pickup_type
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // drop_off_type
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8) // shape_dist_traveled
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, stopTimes entity, int offset) {
        entity.setTrip_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setArrival_time(cursor.getString(offset + 1));
        entity.setDeparture_time(cursor.getString(offset + 2));
        entity.setStop_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStop_sequence(cursor.getInt(offset + 4));
        entity.setStop_headsign(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPickup_type(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDrop_off_type(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setShape_dist_traveled(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(stopTimes entity, long rowId) {
        return entity.getStop_sequence();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(stopTimes entity) {
        if(entity != null) {
            return entity.getStop_sequence();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.ilsecondodasinistra.catchit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilsecondodasinistra.catchit.database.routes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table routes.
*/
public class routesDao extends AbstractDao<routes, Integer> {

    public static final String TABLENAME = "routes";

    /**
     * Properties of entity routes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Route_id = new Property(0, int.class, "route_id", true, "ROUTE_ID");
        public final static Property Agency_id = new Property(1, Integer.class, "agency_id", false, "AGENCY_ID");
        public final static Property Route_short_name = new Property(2, String.class, "route_short_name", false, "ROUTE_SHORT_NAME");
        public final static Property Route_long_name = new Property(3, String.class, "route_long_name", false, "ROUTE_LONG_NAME");
        public final static Property Route_desc = new Property(4, String.class, "route_desc", false, "ROUTE_DESC");
        public final static Property Route_type = new Property(5, Integer.class, "route_type", false, "ROUTE_TYPE");
        public final static Property Route_url = new Property(6, String.class, "route_url", false, "ROUTE_URL");
        public final static Property Route_color = new Property(7, String.class, "route_color", false, "ROUTE_COLOR");
        public final static Property Route_text_color = new Property(8, String.class, "route_text_color", false, "ROUTE_TEXT_COLOR");
    };


    public routesDao(DaoConfig config) {
        super(config);
    }
    
    public routesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'routes' (" + //
                "'ROUTE_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: route_id
                "'AGENCY_ID' INTEGER," + // 1: agency_id
                "'ROUTE_SHORT_NAME' TEXT," + // 2: route_short_name
                "'ROUTE_LONG_NAME' TEXT," + // 3: route_long_name
                "'ROUTE_DESC' TEXT," + // 4: route_desc
                "'ROUTE_TYPE' INTEGER," + // 5: route_type
                "'ROUTE_URL' TEXT," + // 6: route_url
                "'ROUTE_COLOR' TEXT," + // 7: route_color
                "'ROUTE_TEXT_COLOR' TEXT);"); // 8: route_text_color
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'routes'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, routes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRoute_id());
 
        Integer agency_id = entity.getAgency_id();
        if (agency_id != null) {
            stmt.bindLong(2, agency_id);
        }
 
        String route_short_name = entity.getRoute_short_name();
        if (route_short_name != null) {
            stmt.bindString(3, route_short_name);
        }
 
        String route_long_name = entity.getRoute_long_name();
        if (route_long_name != null) {
            stmt.bindString(4, route_long_name);
        }
 
        String route_desc = entity.getRoute_desc();
        if (route_desc != null) {
            stmt.bindString(5, route_desc);
        }
 
        Integer route_type = entity.getRoute_type();
        if (route_type != null) {
            stmt.bindLong(6, route_type);
        }
 
        String route_url = entity.getRoute_url();
        if (route_url != null) {
            stmt.bindString(7, route_url);
        }
 
        String route_color = entity.getRoute_color();
        if (route_color != null) {
            stmt.bindString(8, route_color);
        }
 
        String route_text_color = entity.getRoute_text_color();
        if (route_text_color != null) {
            stmt.bindString(9, route_text_color);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public routes readEntity(Cursor cursor, int offset) {
        routes entity = new routes( //
            cursor.getInt(offset + 0), // route_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // agency_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // route_short_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // route_long_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // route_desc
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // route_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // route_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // route_color
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // route_text_color
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, routes entity, int offset) {
        entity.setRoute_id(cursor.getInt(offset + 0));
        entity.setAgency_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRoute_short_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoute_long_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoute_desc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoute_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRoute_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRoute_color(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoute_text_color(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(routes entity, long rowId) {
        return entity.getRoute_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(routes entity) {
        if(entity != null) {
            return entity.getRoute_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.ilsecondodasinistra.catchit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilsecondodasinistra.catchit.database.trips;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table trips.
*/
public class tripsDao extends AbstractDao<trips, Integer> {

    public static final String TABLENAME = "trips";

    /**
     * Properties of entity trips.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Route_id = new Property(0, int.class, "route_id", false, "ROUTE_ID");
        public final static Property Service_id = new Property(1, int.class, "service_id", false, "SERVICE_ID");
        public final static Property Trip_id = new Property(2, int.class, "trip_id", true, "TRIP_ID");
        public final static Property Trip_headsign = new Property(3, String.class, "trip_headsign", false, "TRIP_HEADSIGN");
        public final static Property Trip_short_name = new Property(4, String.class, "trip_short_name", false, "TRIP_SHORT_NAME");
        public final static Property Direction_id = new Property(5, Integer.class, "direction_id", false, "DIRECTION_ID");
        public final static Property Block_id = new Property(6, String.class, "block_id", false, "BLOCK_ID");
        public final static Property Shape_id = new Property(7, Integer.class, "shape_id", false, "SHAPE_ID");
        public final static Property Wheelchair_accessible = new Property(8, Integer.class, "wheelchair_accessible", false, "WHEELCHAIR_ACCESSIBLE");
    };


    public tripsDao(DaoConfig config) {
        super(config);
    }
    
    public tripsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'trips' (" + //
                "'ROUTE_ID' INTEGER NOT NULL ," + // 0: route_id
                "'SERVICE_ID' INTEGER NOT NULL ," + // 1: service_id
                "'TRIP_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 2: trip_id
                "'TRIP_HEADSIGN' TEXT," + // 3: trip_headsign
                "'TRIP_SHORT_NAME' TEXT," + // 4: trip_short_name
                "'DIRECTION_ID' INTEGER," + // 5: direction_id
                "'BLOCK_ID' TEXT," + // 6: block_id
                "'SHAPE_ID' INTEGER," + // 7: shape_id
                "'WHEELCHAIR_ACCESSIBLE' INTEGER);"); // 8: wheelchair_accessible
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'trips'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, trips entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRoute_id());
        stmt.bindLong(2, entity.getService_id());
        stmt.bindLong(3, entity.getTrip_id());
 
        String trip_headsign = entity.getTrip_headsign();
        if (trip_headsign != null) {
            stmt.bindString(4, trip_headsign);
        }
 
        String trip_short_name = entity.getTrip_short_name();
        if (trip_short_name != null) {
            stmt.bindString(5, trip_short_name);
        }
 
        Integer direction_id = entity.getDirection_id();
        if (direction_id != null) {
            stmt.bindLong(6, direction_id);
        }
 
        String block_id = entity.getBlock_id();
        if (block_id != null) {
            stmt.bindString(7, block_id);
        }
 
        Integer shape_id = entity.getShape_id();
        if (shape_id != null) {
            stmt.bindLong(8, shape_id);
        }
 
        Integer wheelchair_accessible = entity.getWheelchair_accessible();
        if (wheelchair_accessible != null) {
            stmt.bindLong(9, wheelchair_accessible);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public trips readEntity(Cursor cursor, int offset) {
        trips entity = new trips( //
            cursor.getInt(offset + 0), // route_id
            cursor.getInt(offset + 1), // service_id
            cursor.getInt(offset + 2), // trip_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trip_headsign
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trip_short_name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // direction_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // block_id
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // shape_id
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // wheelchair_accessible
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, trips entity, int offset) {
        entity.setRoute_id(cursor.getInt(offset + 0));
        entity.setService_id(cursor.getInt(offset + 1));
        entity.setTrip_id(cursor.getInt(offset + 2));
        entity.setTrip_headsign(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrip_short_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDirection_id(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBlock_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShape_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWheelchair_accessible(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(trips entity, long rowId) {
        return entity.getTrip_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(trips entity) {
        if(entity != null) {
            return entity.getTrip_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
